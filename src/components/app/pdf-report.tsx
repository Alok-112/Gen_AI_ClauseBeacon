import React from 'react';
import { FileSearch, AlertTriangle, CheckSquare } from 'lucide-react';
import type { AnalysisResult } from '@/lib/types';
import { MarkdownRenderer } from './markdown-renderer';

type PDFReportProps = {
  analysis: AnalysisResult;
  language: string;
};

export const PDFReport = React.forwardRef<HTMLDivElement, PDFReportProps>(
    ({ analysis, language }, ref) => {
        const { summary, riskFactors, checklist } = analysis;
        
        // This is a more robust way to parse the checklist, similar to the checklist-tab component.
        const checklistItems = checklist
            .split(/[\n]+/)
            .flatMap(line => line.split(/\s*(?:-|\*)\s+/))
            .map(item => item.trim())
            .filter(item => item.length > 0);

        return (
            <div ref={ref} className="bg-white text-gray-800 p-10 font-sans">
                <header className="flex items-center justify-between pb-6 border-b-2 border-gray-200">
                    <div className="flex items-center gap-4">
                        <FileSearch className="h-12 w-12 text-blue-600" />
                        <div>
                            <h1 className="text-4xl font-bold text-gray-900">ClauseBeacon</h1>
                            <p className="text-lg text-gray-600">Legal Document Analysis Report</p>
                        </div>
                    </div>
                    <div className="text-right">
                        <p className="text-sm text-gray-500">Date: {new Date().toLocaleDateString()}</p>
                        <p className="text-sm text-gray-500">Language: {language}</p>
                    </div>
                </header>

                <main className="mt-8">
                    <section className="mb-10">
                        <h2 className="text-2xl font-semibold text-gray-800 border-b-2 border-blue-500 pb-2 mb-4">
                            Executive Summary
                        </h2>
                        <div className="text-base leading-relaxed">
                           <MarkdownRenderer content={summary} />
                        </div>
                    </section>

                    <section className="mb-10">
                        <h2 className="text-2xl font-semibold text-gray-800 border-b-2 border-red-500 pb-2 mb-4">
                            Potential Risk Factors
                        </h2>
                        {riskFactors.length > 0 ? (
                            <div className="space-y-4">
                                {riskFactors.map((risk, index) => (
                                    <div key={index} className="p-4 border-l-4 border-red-500 bg-red-50 rounded-r-lg flex items-start gap-4">
                                        <AlertTriangle className="h-6 w-6 text-red-600 flex-shrink-0 mt-1" />
                                        <div className="text-base flex-1"><MarkdownRenderer content={risk} /></div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p className="text-gray-600 italic">No significant risk factors were identified in the document.</p>
                        )}
                    </section>

                    <section>
                        <h2 className="text-2xl font-semibold text-gray-800 border-b-2 border-green-500 pb-2 mb-4">
                            Actionable Checklist
                        </h2>
                        {checklistItems.length > 0 ? (
                             <div className="space-y-3">
                                {checklistItems.map((item, index) => (
                                    <div key={index} className="flex items-start gap-3">
                                        <CheckSquare className="h-5 w-5 text-green-600 flex-shrink-0 mt-1" />
                                        <div className="text-base flex-1"><MarkdownRenderer content={item} /></div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p className="text-gray-600 italic">No specific actionable items were generated from the document.</p>
                        )}
                    </section>
                </main>

                <footer className="mt-12 pt-6 border-t-2 border-gray-200 text-center text-xs text-gray-500">
                    <p>This report was generated by ClauseBeacon, an AI-powered legal analysis tool.</p>
                    <p>This is not legal advice. The information provided is for informational purposes only and should not be considered a substitute for professional legal counsel. Always consult with a qualified attorney for advice on specific legal issues.</p>
                </footer>
            </div>
        );
    }
);

PDFReport.displayName = 'PDFReport';
